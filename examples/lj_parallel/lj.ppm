client lj
  INTEGER, DIMENSION(6) :: bcdef = ppm_param_bcdef_periodic
  REAL(MK), DIMENSION(3) :: r_pq
  REAL(MK)               :: r_s_pq2
  REAL(MK), DIMENSION(3) :: dF
  REAL(MK)               :: scaldF
  REAL(MK)               :: cutoff
  REAL(MK)               :: E_prc
  REAL(MK)               :: Ev_tot, Ep_tot, E_tot
  REAL(MK)               :: Ev_tot_old, Ep_tot_old
  REAL(MK), DIMENSION(3) :: energies,energies_reduced
  REAL(MK), DIMENSION(:,:), pointer :: displace
  REAL(MK), DIMENSION(:,:), pointer :: xp
  INTEGER :: st = 0
  REAL(MK)               :: disp,maxdisp,allmaxdisp
  REAL(MK)               :: skin
  REAL(MK)               :: sigma6,sigma12
  CLASS(ppm_t_part_prop_d_), pointer :: prop => NULL()
  INTEGER                :: iter_time, map_time, fcalc_time
  REAL(MK)               :: time_diff,time3=0.0_MK,time1,time2
  INTEGER :: clock=0

  add_arg(m,<#REAL(MK)#>,1.0_MK,0.0_MK,'mass','mass of particles')
  add_arg(eps,<#REAL(MK)#>,1.0_MK,0.0_MK,'epsilon','Potential well depth')
  add_arg(sigma,<#REAL(MK)#>,1.0_MK,0.0_MK,'sigma','distance of potential well')
  add_arg(dt,<#REAL(MK)#>,1.0_MK,0.0_MK,'delta_t','time step')

  ppm_init()

  sigma6 = sigma**6
  sigma12 = sigma**12
  !cutoff = sigma*(2.5_MK/1.1_MK)
  cutoff = sigma*2.5_MK
  skin = 0.1_MK*cutoff

  IF (ppm_rank.eq.0) THEN
    PRINT*,'ghostlayer:',cutoff+skin
  ENDIF

  topo = create_topology(bcdef,ghost_size=<#cutoff + skin#>)
  parts = create_particles(topo,ghost_size=<#cutoff + skin#>)
  !allocate(displace(ppm_dim,parts%Npart))
  !CALL RANDOM_NUMBER(displace)
  !displace = (displace - 0.5_MK) * parts%h_avg * 1.0E-6_MK
  !CALL parts%move(displace, info)
  CALL parts%apply_bc(info)

  global_mapping(parts, topo)

  v = create_property(parts, ppm_dim, "velocity",zero=true)
  a = create_property(parts, ppm_dim, "acceleration",zero=true)
  F = create_property(parts, ppm_dim, "force",zero=true)
  E = create_property(parts, 1, "energy",zero=true)
  dx = create_property(parts, ppm_dim, "displace",zero=true)
write(*,*)ppm_rank
  ghost_mapping(parts)

  !PRINT*,parts%Npart,parts%Mpart-parts%Npart,parts%h_avg,sigma
  !PRINT*,'eq dist:',sigma*2.0_MK**(1.0_MK/6.0_MK)
  nlist = create_neighlist(parts,cutoff=<#cutoff#>,skin=<#skin#>,sym=<#.FALSE.#>)

  !E_prc =  4.0_MK*eps*((sigma/(cutoff+skin))**12 - (sigma/(cutoff+skin))**6)
  E_prc =  4.0_MK*eps*((sigma/cutoff)**12 - (sigma/cutoff)**6)

  CALL ppm_tstats_setup(3,info)
  CALL ppm_tstats_add('iteration',iter_time,info)
  CALL ppm_tstats_add('mappings',map_time,info)
  CALL ppm_tstats_add('force calc.',fcalc_time,info)

  t = timeloop(tstart=0.0_MK,deltat=dt,tend=stop_time)
    CALL ppm_tstats_tic(iter_time,st+1,info)
    maxdisp = 0.0_MK
    allmaxdisp = 0.0_MK
    foreach p in particles(parts) with positions(x,writex=true) sca_props(E) vec_props(F,a,v,dx) prec(ppm_kind_double)
      a_p(:) = F_p(:)/m
      x_p(:) = x_p(:) + v_p(:)*dt + 0.5_MK*a_p(:)*dt**2
      F_p(:) = 0.0_MK
      E_p = 0.0_MK
      dx_p(:) = dx_p(:) + v_p(:)*dt + 0.5_MK*a_p(:)*dt**2
      disp = dx_p(1)**2 + dx_p(2)**2 + dx_p(3)**2
      IF (disp.gt.maxdisp) maxdisp = disp
    end foreach

    CALL MPI_Allreduce(maxdisp,allmaxdisp,1,ppm_mpi_kind,MPI_MAX,0,comm,info)
    CALL ppm_tstats_tic(map_time,st+1,info)
    !if (4.0_MK*allmaxdisp.ge.skin**2) THEN
    IF (MOD(st,2)==0) THEN
      CALL parts%apply_bc(info)
      partial_mapping(parts)
      foreach p in particles(parts) with vec_props(dx) prec(ppm_kind_double)
        dx_p(:) = 0.0_MK
      end foreach
      ghost_mapping(parts)
      ! this should recompute the neighlist
      time1=MPI_WTIME()
      comp_neighlist(parts)
      time2=MPI_WTIME()
      time3=time3+time2-time1
      clock=clock+1
    else
      parts%flags(ppm_part_partial) = .true. ! hack
      parts%flags(ppm_part_areinside) = .true.
      parts%flags(ppm_part_ghosts) = .true.
      prop => parts%props%begin()
      DO WHILE (ASSOCIATED(prop))
        prop%flags(ppm_ppt_partial) = .true.
        prop => parts%props%next()
      enddo
      CALL parts%map_ghost_push_positions(info)
      ghost_mapping(parts)
      CALL parts%map_ghost_pop_positions(info)
    ENDIF
    CALL ppm_tstats_toc(map_time,st+1,time_diff,info)


    CALL ppm_tstats_tic(fcalc_time,st+1,info)
    foreach p in particles(parts) with positions(x) sca_props(E) vec_props(F) prec(ppm_kind_double)
      foreach q in neighbors(p,nlist) with positions(x) prec(ppm_kind_double)
        r_pq(:) = x_p(:) - x_q(:)
        r_s_pq2 = r_pq(1)**2 + r_pq(2)**2 + r_pq(3)**2
        IF (r_s_pq2.le.cutoff**2) THEN
          scaldF = (24.0_MK*eps)*(2.0_MK*(sigma12/r_s_pq2**7) - (sigma6/r_s_pq2**4))
          F_p(:) = F_p(:) + r_pq(:)*scaldF
          E_p = E_p + 4.0_MK*eps*((sigma12/r_s_pq2**6) - (sigma6/r_s_pq2**3)) &
          &         - E_prc
        ENDIF
      end foreach
    end foreach
    CALL ppm_tstats_toc(fcalc_time,st+1,time_diff,info)
    foreach p in particles(parts) with positions(x) vec_props(F,a,v) prec(ppm_kind_double)
      v_p(:) = v_p(:) + 0.5_MK*(a_p(:) + (F_p(:)/m))*dt
    end foreach
    t = t + dt
    !ghost_mapping(parts)

    ! analysis
    Ev_tot_old = Ev_tot
    Ep_tot_old = Ep_tot
    E_tot = 0.0_MK
    Ev_tot = 0.0_MK
    Ep_tot = 0.0_MK
    foreach p in particles(parts) with sca_props(E) vec_props(v) prec(ppm_kind_double)
      Ev_tot = Ev_tot + 0.5_MK*m*(v_p(1)**2+v_p(2)**2+v_p(3)**2)
      Ep_tot = Ep_tot + E_p
    end foreach
    Ep_tot = Ep_tot*0.5_MK
    E_tot = Ev_tot + Ep_tot
    energies(1) = E_tot
    energies(2) = Ev_tot
    energies(3) = Ep_tot

    CALL MPI_Allreduce(energies,energies_reduced,3,ppm_mpi_kind,MPI_SUM,0,comm,info)

    IF (ppm_rank.EQ.0) THEN
      !WRITE(*,'(I7,3E17.8)'),st,energies_reduced(1),energies_reduced(2),energies_reduced(3)
      WRITE(*,*)st
    ENDIF

    !WRITE(*,'(I7,3E17.8)'),st,E_tot,Ev_tot, Ep_tot!,maxdisp
    !PRINT *,Ev_tot, Ep_tot, E_tot
    !PRINT *,Ev_tot-Ev_tot_old, Ep_tot-Ep_tot_old
    !print([E=>parts,v=>parts,F=>parts],100 )
    !print([v=>parts],50)
    st = st + 1

    CALL ppm_tstats_toc(iter_time,st,time_diff,info)
  end timeloop
  !CALL ppm_tstats_collect('time.dat',info)

  WRITE(*,*)ppm_rank,clock,time3,time3/real(clock,mk)
  ppm_finalize()
END client

