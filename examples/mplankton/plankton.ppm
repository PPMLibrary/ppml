client plankton
  use ppm_module_topo_get
  integer, dimension(6) :: bcdef = ppm_param_bcdef_periodic
  integer, dimension(2) :: seed
  real(mk), parameter   :: pi = acos(-1.0_mk) 
  real(mk), dimension(:,:), pointer :: displace
  integer               :: istage = 1
  integer               :: interval
  class(ppm_t_part_prop_d_), pointer :: prop => null()
  ! mesh stuff 
  real(mk), dimension(2), parameter :: offset = (/0.0_mk, 0.0_mk/)
  integer, dimension(2)   :: gl = (/1,1/)
  real(mk), dimension(2), parameter :: h = (/0.1_mk, 0.1_mk/)
  
  global_parameter(a,<#real(mk)#>,1.0_mk)
  global_parameter(b,<#real(mk)#>,2.5_mk)
  global_parameter(gam,<#real(mk)#>,1.5_mk)
  global_parameter(lambda1,<#real(mk)#>,4.0_mk)
  global_parameter(lambda2,<#real(mk)#>,4.0_mk)
  global_parameter(psi0,<#real(mk)#>,0.1_mk)
  global_parameter(k,<#real(mk)#>,1.5_mk)
  global_var(np_global,<#integer#>,0)
  global_var(mesh,<#type(ppm_t_equi_mesh), pointer#>,<#null()#>)


  add_arg(Dcp,<#real(mk)#>,1.0_mk,0.0_mk,'Dcp_param','Diffusion constant of P')
  add_arg(Dcz,<#real(mk)#>,1.0_mk,0.0_mk,'Dcz_param','Diffusion constant of Z')
  !add_arg(nm,<#integer, dimension(2)#>,<#(/97,97,97/)#>,ctrl_name='nm',help_txt='Grid dimensions')
  add_arg(nm,<#integer, dimension(2)#>,<#(/33,33/)#>,ctrl_name='nm',help_txt='Grid dimensions')

  ppm_init(0)

  P = create_field(1, "P")
  Z = create_field(1, "Z")
  
  s = create_field(1, "stream")
  adv = create_field(2, "advection")
  
  topo = create_topology(bcdef)

  create_mesh(topo,offset,h=h,ghost_size=gl,mesh=mesh)
  add_patch(mesh,[<#-1.0_mk*pi#>,<#-1.0_mk*pi#>,<#3.0_mk*pi#>,<#3.0_mk*pi#>])

  np_global = ((2.0_mk*pi)/h(1))**2 !product(mesh%nm(1:2)-1)
  print *,np_global
  
  ! create particles
  parts = create_particles(npart=np_global,min=[0.0_mk,0.0_mk],max=[<#2.0_mk*pi#>,<#2.0_mk*pi#>])
  
  global_mapping(parts, topo)

  discretize(P,parts)
  discretize(Z,parts)
  discretize(s,parts)
  discretize(adv,parts)


  foreach p in particles(parts) with positions(x) sca_fields(P,Z)
    P_p = 1.0_mk
    Z_p = 0.0_mk 
    if ((x_p(1).gt.(7.0_mk/10.0_mk)*pi).and.(x_p(1).lt.(13.0_mk/10.0_mk)*pi).and.&
    &   (x_p(2).gt.(5.0_mk/6.0_mk)*pi).and.(x_p(2).lt.(7.0_mk/6.0_mk)*pi)) then
      Z_p = 0.1_mk
    end if
  end foreach
  ghost_mapping(parts)
  

  o, nstages = create_ode([parts,P,Z], plankton_rhs, [P=>parts,Z,s,adv], rk4)
  !interval = int(stop_time/time_step)/1000
  
  !print([P=>parts, Z=>parts],1 )
  t = timeloop()
    do istage=1,nstages
      ode_step(o, t, time_step, istage)
      call parts%apply_bc(info) ! since we've moved the particles
      partial_mapping(parts) 
      !stop
    end do
    !print([P=>parts, Z=>parts],10 )
  end timeloop

  !print([U=>parts, V=>parts],1 )
  ppm_finalize()
end client

rhs plankton_rhs(P=>parts,Z,s,adv)
  real(mk)               :: h2
  get_fields(dx,dP,dZ)

  set_type(parts,ppm_t_particles_d)

  ! calculate stream funciton based on current particle positions
  foreach p in particles(parts) with positions(x) sca_fields(s)
    s_p = psi0*sin(k*x_p(1))*sin(k*x_p(2))
  end foreach

  ! interpolate to mesh
  call parts%interp_to_mesh_all(mesh,ppm_param_rmsh_kernel_mp4,info)
  
  !call mesh%map_ghost_get(info)
  !call P%map_ghost_push(mesh,info)
  !call Z%map_ghost_push(mesh,info)
  !call s%map_ghost_push(mesh,info)
  !call mesh%map_send(info)
  !call s%map_ghost_pop(mesh,info)
  !call Z%map_ghost_pop(mesh,info)
  !call P%map_ghost_pop(mesh,info)

  ! calculate derivatives on mesh
  h2 = product(mesh%h) ! is that correct?
  ! calculate laplaceian
  foreach n in equi_mesh(mesh) with sca_fields(P,dP,Z,dZ) indices(i,j) stencil_width(1,1)
    for interior
      dP_n = (P_n[-1,] + P_n[+1,] + P_n[,-1] + P_n[,+1] - 4.0_mk*P_n)/h2
      dZ_n = (Z_n[-1,] + Z_n[+1,] + Z_n[,-1] + Z_n[,+1] - 4.0_mk*Z_n)/h2
  end foreach

  ! caluclate advection displacement
  foreach n in equi_mesh(mesh) with sca_fields(s) vec_fields(dx=adv) indices(i,j) stencil_width(1,1)
    for interior
      dx_n(1) = (s_n[,+1] - s_n[,-1])/-mesh%h(2)
      dx_n(2) = (s_n[+1,] - s_n[-1,])/-mesh%h(1)
  end foreach

  ! recreate particles from mesh
  call parts%recreate_from_mesh(mesh,info)
  
  call parts%apply_bc(info)
  partial_mapping(parts)

  print([P=>parts, Z=>parts],40 )
  print *,parts%npart

  ! reaction terms on particles
  foreach p in particles(parts) with sca_fields(P,Z,dP,dZ) vec_fields(dx,adv)
    dP_p = Dcp*dP_p + P_p*(1 - P_p) - a*Z_p*(1 - exp(-lambda1*P_p))
    dZ_p = Dcz*dZ_p - gam*Z_p + b*Z_p*(1 - exp(-lambda2*P_p))
    dx_p(:) = adv_p(:)
  end foreach
  
 
end rhs
