client plankton
  USE ppm_module_topo_get
  INTEGER, dimension(6) :: bcdef = ppm_param_bcdef_periodic
  INTEGER, dimension(2) :: seed
  REAL(MK), dimension(:,:), pointer :: displace
  INTEGER               :: istage = 1
  INTEGER               :: interval
  CLASS(ppm_t_part_prop_d_), pointer :: prop => null()
  ! mesh stuff
  REAL(MK), dimension(2), parameter :: offset = (/0.0_MK, 0.0_MK/)
  INTEGER, dimension(2)   :: gl = (/1,1/)
  REAL(MK), dimension(2), parameter :: h = (/0.01_MK, 0.01_MK/)
  REAL(MK)               :: maxdx,mindx

  global_parameter(pi,<#REAL(MK)#>,<#acos(-1.0_MK)#>)
  global_parameter(a,<#REAL(MK)#>,1.0_MK)
  global_parameter(b,<#REAL(MK)#>,2.5_MK)
  global_parameter(gam,<#REAL(MK)#>,1.5_MK)
  global_parameter(lambda1,<#REAL(MK)#>,4.0_MK)
  global_parameter(lambda2,<#REAL(MK)#>,4.0_MK)
  global_parameter(psi0,<#REAL(MK)#>,0.1_MK)
  global_parameter(k,<#REAL(MK)#>,1.5_MK)
  global_var(np_global,<#INTEGER#>,0)
  global_var(p_vol,<#REAL(MK)#>,0.0_MK)
  global_var(step,<#INTEGER#>,0)
  global_var(mesh,<#type(ppm_t_equi_mesh), pointer#>,<#null()#>)


  add_arg(Dcp,<#REAL(MK)#>,1.0_MK,0.0_MK,'Dcp_param','Diffusion constant of P')
  add_arg(Dcz,<#REAL(MK)#>,1.0_MK,0.0_MK,'Dcz_param','Diffusion constant of Z')
  !add_arg(nm,<#INTEGER, dimension(2)#>,<#(/97,97,97/)#>,ctrl_name='nm',help_txt='Grid dimensions')
  add_arg(nm,<#INTEGER, dimension(2)#>,<#(/33,33/)#>,ctrl_name='nm',help_txt='Grid dimensions')

  ppm_init(0)

  PRINT *,Dcp,Dcz

  P   = create_field(1, "P")
  Z   = create_field(1, "Z")
  vol = create_field(1, "volume")
  s   = create_field(1, "stream")
  adv = create_field(2, "advection")

  topo = create_topology(bcdef)

  create_mesh(topo,offset,h=h,ghost_size=gl,mesh=mesh)
  add_patch(mesh,[<#-1.0_MK#>,<#-1.0_MK#>,<#3.0_MK#>,<#3.0_MK#>])

  np_global = ((2.0_MK)/h(1))**2 !PRODUCT(mesh%nm(1:2)-1)
  p_vol = h(1)*h(2) !((max_phys(1)-min_phys(1))*(max_phys(2)-min_phys(2)))/np_global
  PRINT*,np_global,p_vol

  ! create particles
  parts = create_particles(npart=np_global,min=[0.0_MK,0.0_MK],max=[<#2.0_MK#>,<#2.0_MK#>])

  global_mapping(parts, topo)

  CALL parts%remesh(mesh,ppm_param_rmsh_kernel_mp4,info)

  discretize(P,parts)
  discretize(Z,parts)
  discretize(vol,parts)
  discretize(s,parts)
  discretize(adv,parts)

  foreach p in particles(parts) with positions(x) sca_fields(P,Z,vol)
    vol_p = p_vol
    P_p = 1.0_MK
    Z_p = 0.0_MK
    IF ((x_p(1).gt.(7.0_MK/10.0_MK)).AND.(x_p(1).lt.(13.0_MK/10.0_MK)).AND.&
    &   (x_p(2).gt.(5.0_MK/6.0_MK)).AND.(x_p(2).lt.(7.0_MK/6.0_MK))) THEN
      Z_p = 0.1_MK
    ENDIF
  end foreach
  ghost_mapping(parts)


  o, nstages = create_ode([parts,P,Z], plankton_rhs, [P=>parts,Z,vol,s,adv], eulerf)
  !interval = int(stop_time/time_step)/1000

  print([P=>parts, Z=>parts],1 )

  step = step + 1

  !print([P=>parts, Z=>parts],1 )

  t = timeloop()
    DO istage=1,nstages
      ode_step(o, t, time_step, istage)

      CALL parts%apply_bc(info) ! since we've moved the particles

      partial_mapping(parts)
      !stop
    ENDDO
    !print([P=>parts, Z=>parts],10 )
  end timeloop

  !print([U=>parts, V=>parts],1 )
  ppm_finalize()
END client

rhs plankton_rhs(P=>parts,Z,vol,s,adv)
  REAL(MK)               :: h2
  REAL(MK)               :: maxdp,maxp,maxdz,maxz,maxv
  get_fields(dx,dP,dZ)

  set_type(parts,ppm_t_particles_d)

  ! calculate stream funciton based on current particle positions
  foreach p in particles(parts) with positions(x) sca_fields(s,P,Z,vol)
    vol_p = p_vol
    s_p = psi0*SIN(pi*k*x_p(1))*SIN(pi*k*x_p(2))*vol_p
    P_p = P_p*vol_p
    Z_p = Z_p*vol_p
  end foreach

  ! interpolate to mesh
  CALL parts%interp_to_mesh_all(mesh,ppm_param_rmsh_kernel_mp4,info)

  !CALL mesh%map_ghost_get(info)
  !CALL P%map_ghost_push(mesh,info)
  !CALL Z%map_ghost_push(mesh,info)
  !CALL s%map_ghost_push(mesh,info)
  !CALL mesh%map_send(info)
  !CALL s%map_ghost_pop(mesh,info)
  !CALL Z%map_ghost_pop(mesh,info)
  !CALL P%map_ghost_pop(mesh,info)

  ! calculate derivatives on mesh
  h2 = product(mesh%h) ! is that correct?
  ! calculate laplaceian
  foreach n in equi_mesh(mesh) with sca_fields(P,dP,Z,dZ) indices(i,j) stencil_width(1,1)
    for interior
      dP_n = (P_n[-1,] + P_n[+1,] + P_n[,-1] + P_n[,+1] - 4.0_MK*P_n)/h2
      dZ_n = (Z_n[-1,] + Z_n[+1,] + Z_n[,-1] + Z_n[,+1] - 4.0_MK*Z_n)/h2
  end foreach

  ! caluclate advection displacement
  foreach n in equi_mesh(mesh) with sca_fields(s) vec_fields(adv) indices(i,j) stencil_width(1,1)
    for interior
      adv_n(1) = (s_n[,+1] - s_n[,-1])/(-2.0_MK*mesh%h(2))
      adv_n(2) = (s_n[+1,] - s_n[-1,])/(2.0_MK*mesh%h(1))
  end foreach

  ! recreate particles from mesh
  CALL parts%recreate_from_mesh(mesh,info)

  CALL parts%apply_bc(info)

  partial_mapping(parts)

  foreach p in particles(parts) with sca_fields(P,dP,Z,dZ,vol) vec_fields(adv)
    P_p = P_p/vol_p
    dP_p = dP_p/vol_p
    Z_p = Z_p/vol_p
    dZ_p = dZ_p/vol_p
    adv_p(:) = adv_p(:)/vol_p
  end foreach

  print([P=>parts, Z=>parts],1 )
  PRINT*,step

  maxp = 0.0_MK
  maxz = 0.0_MK
  ! reaction terms on particles
  foreach p in particles(parts) with positions(x) sca_fields(P,Z,dP,dZ) vec_fields(dx,adv)
    !maxp = max(maxp,dP_p)
    !maxz = max(maxz,dZ_p)
    dP_p = Dcp*dP_p + P_p*(1 - P_p) - a*Z_p*(1 - EXP(-lambda1*P_p))
    !PRINT*,P_p,Z_p,EXP(-lambda1*P_p),dP_p
    !PRINT*,x_p(:)
    dZ_p = Dcz*dZ_p - gam*Z_p + b*Z_p*(1 - EXP(-lambda2*P_p))
    dx_p(:) = adv_p(:)
  end foreach

  !PRINT*,maxp,maxz
  !maxdp = 0.0_MK
  !maxp = 0.0_MK
  !maxdz = 0.0_MK
  !maxz = 0.0_MK
  !maxv = 0.0_MK
  !foreach p in particles(parts) with sca_fields(P,Z,dP,dZ,vol)
  !  maxdp = min(maxdp,dP_p)
  !  maxp = max(maxp,P_p)
  !  maxdz = max(maxdz,dZ_p)
  !  maxz = max(maxz,Z_p)
  !  maxv = max(maxv,vol_p)
  !end foreach
  !PRINT*,maxdp,maxp,maxdz,maxz,maxv

  step = step + 1

end rhs
