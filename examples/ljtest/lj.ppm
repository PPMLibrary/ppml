client lj
  integer, dimension(6) :: bcdef = ppm_param_bcdef_periodic
  real(mk), dimension(3) :: r_pq
  real(mk)               :: r_s_pq
  real(mk), dimension(3) :: dF
  real(mk)               :: cutoff
  real(mk)               :: E_prc
  real(mk)               :: Ev_tot = 0.0_mk
  real(mk)               :: Ep_tot = 0.0_mk
  real(mk)               :: E_tot = 0.0_mk
  real(mk)               :: Ev_tot_old, Ep_tot_old
  real(mk)               :: sigma,eps,m,dt
  real(mk), dimension(:,:), pointer :: displace
  real(mk), dimension(:,:), pointer :: xp
  class(ppm_t_neighlist_d_), pointer :: templist
  type(ppm_t_particles_d)          :: parts
  integer :: nia,npart
  integer :: st = 0

  sigma = 0.2_mk
  eps = 1.0E-10_mk
  m = 1.0_mk
  !dt = 0.0001_mk
  dt = 0.00001_mk
  ppm_init(0)
  !print *,ghost_size


  topo = create_topology(bcdef)

  call parts%create(3,info)
  force_type(parts,ppm_t_particles_d)
  parts%active_topoid = topo
  parts%ghostlayer = ghost_size
  call parts%get_xp(xp,info)
  xp(1,1) = 1.1_mk - sigma*2.0_mk**(1.0_mk/6.0_mk) !0.9_mk
  xp(2,1) = 0.5_mk
  xp(3,1) = 0.5_mk
  xp(1,2) = 0.1_mk
  xp(2,2) = 0.5_mk
  xp(3,2) = 0.5_mk
  xp(1,3) = 0.1_mk + sigma*2.0_mk**(1.0_mk/6.0_mk) !0.3_mk
  xp(2,3) = 0.5_mk
  xp(3,3) = 0.5_mk
  call parts%set_xp(xp,info)
  call parts%apply_bc(info) 

  global_mapping(parts, topo)

  v = create_property(parts, ppm_dim, "velocity",zero=true)
  a = create_property(parts, ppm_dim, "acceleration",zero=true)
  F = create_property(parts, ppm_dim, "force",zero=true)
  E = create_property(parts, 1, "energy",zero=true)

  ghost_mapping(parts)
 
  !print *,'n',parts%Npart,parts%Mpart-parts%Npart
  !print *,'dists',sigma
  ! before: cutoff = 0.4 
  cutoff = sigma*2.5_mk
  nlist = create_neighlist(parts,cutoff=<#cutoff#>,sym=<#.false.#>)
  !print *,'---- nlist'
  !print *,nlist%vlist(1:nlist%nvlist(1),1)
  !print *,nlist%vlist(1:nlist%nvlist(2),2)
  !print *,nlist%vlist(1:nlist%nvlist(3),3)
  !print *,'---- end nlist'
  
  E_prc =  4.0_mk*eps*((sigma/cutoff)**12 - (sigma/cutoff)**6)
  
  t = timeloop(tstart=0.0_mk,deltat=dt,tend=stop_time)
    !print *,'xp',parts%xp(:,1)
    !print *,'xq',parts%xp(:,2)
    !print *,'xr',parts%xp(:,3)
    foreach p in particles(parts) with positions(x,writex=true) sca_props(E) vec_props(F,a,v) prec(ppm_kind_double)
      a_p(:) = F_p(:)/m
      x_p(:) = x_p(:) + v_p(:)*dt + 0.5_mk*a_p(:)*dt**2
      F_p(:) = 0.0_mk
      E_p = 0.0_mk
    end foreach
    !print *,'xp',parts%xp(:,1)
    !print *,'xq',parts%xp(:,2)
    !print *,'xr',parts%xp(:,3)
    call parts%apply_bc(info) 
    partial_mapping(parts)
    ghost_mapping(parts)
    
    ! this should recompute the neighlist
    comp_neighlist(parts)

    foreach p in particles(parts) with positions(x) ghosts(true) sca_props(E)  vec_props(F) prec(ppm_kind_double)
      foreach q in neighbors(p,nlist) with positions(x) prec(ppm_kind_double)
        r_pq(:) = x_p(:) - x_q(:)
        !print *,'xp,xq',x_p(1),x_q(1)
        r_s_pq = sqrt(r_pq(1)**2 + r_pq(2)**2 + r_pq(3)**2) 
        !print *,'r,rs ',r_pq(1),r_s_pq
        dF(:) = (24.0_mk*eps*r_pq(:))*(2.0_mk*(sigma**12/r_s_pq**14) - (sigma**6/r_s_pq**8))
        !print *,'Fpq  ', F_p(1)
        !print *,'dFpq ', dF(1)
        F_p(:) = F_p(:) + dF(:)
        E_p = E_p + 4.0_mk*eps*((sigma/r_s_pq)**12 - (sigma/r_s_pq)**6) &
        &         - E_prc
      end foreach
    end foreach
   

    foreach p in particles(parts) with positions(x) vec_props(F,a,v) prec(ppm_kind_double)
      !print *,'fp',F_p(:)
      !print *,'ap',a_p(:)
      v_p(:) = v_p(:) + 0.5_mk*(a_p(:) + (F_p(:)/m))*dt
      !print *,'vp',v_p(:)
    end foreach
    t = t + dt
    ghost_mapping(parts)
    
    ! analysis
    Ev_tot_old = Ev_tot
    Ep_tot_old = Ep_tot
    E_tot = 0.0_mk
    Ev_tot = 0.0_mk
    Ep_tot = 0.0_mk
    foreach p in particles(parts) with sca_props(E) vec_props(v) prec(ppm_kind_double)
      Ev_tot = Ev_tot + 0.5*m*(v_p(1)**2+v_p(2)**2+v_p(3)**2)
      Ep_tot = Ep_tot + E_p
    end foreach
    Ep_tot = Ep_tot*0.5
    E_tot = Ev_tot + Ep_tot
    print *,st,E_tot
    !print *,'diff',Ev_tot-Ev_tot_old, Ep_tot-Ep_tot_old
    !print *,'tot',Ev_tot, Ep_tot, E_tot
    !print([E=>parts,v=>parts,F=>parts],10 )
    st = st + 1
  end timeloop

end client

