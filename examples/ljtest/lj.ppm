client lj
  INTEGER, DIMENSION(6) :: bcdef = ppm_param_bcdef_periodic
  REAL(MK), DIMENSION(3) :: r_pq
  REAL(MK)               :: r_s_pq
  REAL(MK), DIMENSION(3) :: dF
  REAL(MK)               :: cutoff
  REAL(MK)               :: E_prc
  REAL(MK)               :: Ev_tot = 0.0_MK
  REAL(MK)               :: Ep_tot = 0.0_MK
  REAL(MK)               :: E_tot = 0.0_MK
  REAL(MK)               :: Ev_tot_old, Ep_tot_old
  REAL(MK)               :: sigma,eps,m,dt
  REAL(MK), DIMENSION(:,:), POINTER :: displace
  REAL(MK), DIMENSION(:,:), POINTER :: xp
  CLASS(ppm_t_neighlist_d_), POINTER :: templist
  TYPE(ppm_t_particles_d)          :: parts
  INTEGER :: nia,npart
  INTEGER :: st = 0

  sigma = 0.2_MK
  eps = 1.0E-10_MK
  m = 1.0_MK
  !dt = 0.0001_MK
  dt = 0.00001_MK
  ppm_init(0)
  !PRINT*,ghost_size


  topo = create_topology(bcdef)

  CALL parts%create(3,info)
  force_type(parts,ppm_t_particles_d)
  parts%active_topoid = topo
  parts%ghostlayer = ghost_size
  CALL parts%get_xp(xp,info)
  xp(1,1) = 1.1_MK - sigma*2.0_MK**(1.0_MK/6.0_MK) !0.9_MK
  xp(2,1) = 0.5_MK
  xp(3,1) = 0.5_MK
  xp(1,2) = 0.1_MK
  xp(2,2) = 0.5_MK
  xp(3,2) = 0.5_MK
  xp(1,3) = 0.1_MK + sigma*2.0_MK**(1.0_MK/6.0_MK) !0.3_MK
  xp(2,3) = 0.5_MK
  xp(3,3) = 0.5_MK
  CALL parts%set_xp(xp,info)
  CALL parts%apply_bc(info)

  global_mapping(parts, topo)

  v = create_property(parts, ppm_dim, "velocity",zero=true)
  a = create_property(parts, ppm_dim, "acceleration",zero=true)
  F = create_property(parts, ppm_dim, "force",zero=true)
  E = create_property(parts, 1, "energy",zero=true)

  ghost_mapping(parts)

  !PRINT*,'n',parts%Npart,parts%Mpart-parts%Npart
  !PRINT*,'dists',sigma
  ! before: cutoff = 0.4
  cutoff = sigma*2.5_MK
  nlist = create_neighlist(parts,cutoff=<#cutoff#>,sym=<#.false.#>)
  !PRINT*,'---- nlist'
  !PRINT*,nlist%vlist(1:nlist%nvlist(1),1)
  !PRINT*,nlist%vlist(1:nlist%nvlist(2),2)
  !PRINT*,nlist%vlist(1:nlist%nvlist(3),3)
  !PRINT*,'---- end nlist'

  E_prc =  4.0_MK*eps*((sigma/cutoff)**12 - (sigma/cutoff)**6)

  t = timeloop(tstart=0.0_MK,deltat=dt,tend=stop_time)
    !PRINT*,'xp',parts%xp(:,1)
    !PRINT*,'xq',parts%xp(:,2)
    !PRINT*,'xr',parts%xp(:,3)
    foreach p in particles(parts) with positions(x,writex=true) sca_props(E) vec_props(F,a,v) prec(ppm_kind_double)
      a_p(:) = F_p(:)/m
      x_p(:) = x_p(:) + v_p(:)*dt + 0.5_MK*a_p(:)*dt**2
      F_p(:) = 0.0_MK
      E_p = 0.0_MK
    end foreach
    !PRINT*,'xp',parts%xp(:,1)
    !PRINT*,'xq',parts%xp(:,2)
    !PRINT*,'xr',parts%xp(:,3)
    CALL parts%apply_bc(info)
    partial_mapping(parts)
    ghost_mapping(parts)

    ! this should recompute the neighlist
    comp_neighlist(parts)

    foreach p in particles(parts) with positions(x) ghosts(true) sca_props(E)  vec_props(F) prec(ppm_kind_double)
      foreach q in neighbors(p,nlist) with positions(x) prec(ppm_kind_double)
        r_pq(:) = x_p(:) - x_q(:)
        !PRINT*,'xp,xq',x_p(1),x_q(1)
        r_s_pq = sqrt(r_pq(1)**2 + r_pq(2)**2 + r_pq(3)**2)
        !PRINT*,'r,rs ',r_pq(1),r_s_pq
        dF(:) = (24.0_MK*eps*r_pq(:))*(2.0_MK*(sigma**12/r_s_pq**14) - (sigma**6/r_s_pq**8))
        !PRINT*,'Fpq  ', F_p(1)
        !PRINT*,'dFpq ', dF(1)
        F_p(:) = F_p(:) + dF(:)
        E_p = E_p + 4.0_MK*eps*((sigma/r_s_pq)**12 - (sigma/r_s_pq)**6) &
        &         - E_prc
      end foreach
    end foreach


    foreach p in particles(parts) with positions(x) vec_props(F,a,v) prec(ppm_kind_double)
      !PRINT*,'fp',F_p(:)
      !PRINT*,'ap',a_p(:)
      v_p(:) = v_p(:) + 0.5_MK*(a_p(:) + (F_p(:)/m))*dt
      !PRINT*,'vp',v_p(:)
    end foreach
    t = t + dt
    ghost_mapping(parts)

    ! analysis
    Ev_tot_old = Ev_tot
    Ep_tot_old = Ep_tot
    E_tot = 0.0_MK
    Ev_tot = 0.0_MK
    Ep_tot = 0.0_MK
    foreach p in particles(parts) with sca_props(E) vec_props(v) prec(ppm_kind_double)
      Ev_tot = Ev_tot + 0.5*m*(v_p(1)**2+v_p(2)**2+v_p(3)**2)
      Ep_tot = Ep_tot + E_p
    end foreach
    Ep_tot = Ep_tot*0.5
    E_tot = Ev_tot + Ep_tot
    PRINT*,st,E_tot
    !PRINT*,'diff',Ev_tot-Ev_tot_old, Ep_tot-Ep_tot_old
    !PRINT*,'tot',Ev_tot, Ep_tot, E_tot
    !print([E=>parts,v=>parts,F=>parts],10 )
    st = st + 1
  end timeloop
  ppm_finalize()
end client

