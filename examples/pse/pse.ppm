client pse
  integer, dimension(6) :: bcd = ppm_param_bcdef_periodic
  integer :: istage
  real(ppm_kind_double), parameter     :: dt    = 0.0001_mk
  real(ppm_kind_double), parameter     :: mu    = 0.5_mk
  real(ppm_kind_double), parameter     :: sigma = 0.02_mk
  integer, dimension(2)                :: seed
  real(ppm_kind_double), dimension(:,:), pointer :: displace
  integer                              :: idim
  integer                              :: timer
  real(ppm_kind_double)                :: timing
  ppm_init()

  topo = create_topology(bcd)

  c = create_particles(topo)

  allocate(displace(ppm_dim,c%Npart))
  call random_number(displace)
  displace = (displace - 0.5_mk) * c%h_avg * 0.15_mk
  call c%move(displace, info)
  call c%apply_bc(info)
  call c%set_cutoff(4._mk * c%h_avg, info)

  global_mapping(c,topo)
  
  f = create_field(1, "concentration")

  discretize(f,c)

  ghost_mapping(c)

  foreach p in particles(c) with positions(x) sca_fields(f)
    f_p = 1.0_mk
    do idim = 1, ppm_dim
      f_p = f_p*exp(-((x_p(idim)-mu)**2)/sigma)
    ENDDO
  end foreach

  create_neighlist(c)

  IF (ppm_dim.eq.2) THEN
    Lap = define_op(2, [2, 0, 0, 2], [1.0_mk, 1.0_mk], "Laplacian")
  else 
    Lap = define_op(3, [2,0,0, 0,2,0, 0,0,2], [1.0_mk, 1.0_mk, 1.0_mk], "Laplacian")
  ENDIF 
  L = discretize_op(Lap, c, ppm_param_op_dcpse, [order=>2,c=>0.5_mk])

  o, nstages = create_ode([f=>c], pse_rhs, [f], rk4)
  call ppm_tstats_setup(1,info)
  call ppm_tstats_add('pse',timer,info)

  t = timeloop(0.0_mk,deltat=dt)
    DO istage=1,nstages
      ghost_mapping(c)
      call ppm_tstats_tic(timer,1,info)
      ode_step(o, t, dt, istage)
      call ppm_tstats_toc(timer,1,timing,info)
    ENDDO
    write(*,*) "time: ", t

    call ppm_tstats_collect('time.dat',info)

    print([f=>c], 10)
  end timeloop


  ppm_finalize()
end client
