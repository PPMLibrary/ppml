Feature: time loop macro

  To create many features that automatize time management we need to
  have a standard time loop. We will do this with the timeloop keyword
  and a single timeloop macro. The loop construct will always call the
  same macro (you can have only one) but it can be redefined on a per
  project basis.

  Scenario: basic time loop
    Given setting step.type is real
    And setting predictable_mangle_prefix is on
    When I preprocess
    """
    program timetest
      t = timeloop(0.0_mk,dt,te)
        ! some code here
        a = 10
        print *, t
      end timeloop
    end program timetest

    """
    Then it should expand into
    """
    program timetest
      use ppm_autogenerated_global
      implicit none
      real(mk) :: t
      t = 0.0_mk
      do while (t .le. te)
        ! some code here
        a = 10
        print *, t
      end do
    end program timetest

    """
  
  Scenario: basic time loop with integer steps
    Given setting step.type is integer
    And setting predictable_mangle_prefix is on
    When I preprocess
    """
    program timetest
      istep = timeloop(start,tend=last)
        ! some code here
        a = 10
        print *, istep
      end timeloop
    end program timetest

    """
    Then it should expand into
    """
    program timetest
      use ppm_autogenerated_global
      implicit none
      integer :: istep
      istep = start
      do while (istep .le. last)
        ! some code here
        a = 10
        print *, istep
      end do
    end program timetest

    """
