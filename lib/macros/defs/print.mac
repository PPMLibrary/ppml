macro print(fields, resolution)
% scope.var :r_it, "integer", "= 0"
% parts = Hash.new []
% meshs = Hash.new []
% fields.each do |pair|
%   if scope.type_of(pair[1].to_s.to_sym) == :ppm_t_particles_d
%     parts[pair[1].to_s] = parts[pair[1].to_s] << pair[0].to_s
%   else
%     meshs[pair[1].to_s] = meshs[pair[1].to_s] << pair[0].to_s
%   end
% end
% scope.var :fieldlist, "class(ppm_v_main_abstr), pointer"
% scope.var :temp_fix_assign, "class(ppm_t_main_abstr), pointer"
% parts.each do |p,fs|
if (MOD(<%= :r_it %>,<%= resolution %>).eq.0) then ! print to vtk
allocate(fieldlist)
%   fs.each do |f|
<%= :temp_fix_assign %> => <%= f %>
call <%= :fieldlist %>%push(<%= :temp_fix_assign %>, info)
%   end
% scope.var :vtk_filename, "character(len=64)"
write(<%= :vtk_filename %>, '(A,I0)') "<%= conf.out.basename %>_", <%= :r_it %> 
call ppm_vtk_particles(<%= :vtk_filename %>, <%= p %>, info)
$or_fail("\"Failed to print fields on particle set\"")
deallocate(fieldlist)
% end
end if ! end print to vtk
<%= :r_it %> = <%= :r_it %> + 1
end macro
