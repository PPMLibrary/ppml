macro print(fields, resolution)
% # TODO make this work in the rhs too
% scope.global_var :print_it => "integer :: print_it = 0"
% parts = Hash.new []
% meshs = Hash.new []
% fields.each do |pair|
%   if scope.type_of(pair[1].to_s.to_sym) == :ppm_t_particles_s
%     parts[pair[1].to_s] = parts[pair[1].to_s] << pair[0].to_s
%   elsif scope.type_of(pair[1].to_s.to_sym) == :ppm_t_particles_d
%     parts[pair[1].to_s] = parts[pair[1].to_s] << pair[0].to_s
%   elsif scope.type_of(pair[1].to_s.to_sym) == :ppm_t_equi_mesh
%     meshs[pair[1].to_s] = meshs[pair[1].to_s] << pair[0].to_s
%   else
%     STDERR.puts "Warning: I don't know the type of '#{pair[1]}', ignoring..."
%   end
% end
% scope.global_var :print_fieldlist => "class(ppm_v_main_abstr), pointer :: print_fieldlist => null()"
% scope.var :temp_fix_assign, "class(ppm_t_main_abstr), pointer", " => null()"
% parts.each do |p,fs|
if (MOD(<%= :print_it %>,<%= resolution %>).eq.0) then ! print to vtk
  allocate(print_fieldlist)
%   fs.each do |f|
  <%= :temp_fix_assign %> => <%= f %>
  call <%= :print_fieldlist %>%push(<%= :temp_fix_assign %>, info)
  or_fail("Failed to push fields to field list.")
%   end
% scope.global_var :vtk_filename => "character(len=64) :: vtk_filename"
  write(<%= :vtk_filename %>, '(A,I0)') "<%= conf.out.basename %>_", <%= :print_it %> 
  call ppm_vtk_particles(<%= :vtk_filename %>, <%= p %>, info, Fields=<%= :print_fieldlist %>)
  or_fail("Failed to print fields on particle set")
  deallocate(print_fieldlist)
end if ! end print to vtk
% end
<%= :print_it %> = <%= :print_it %> + 1
end macro
