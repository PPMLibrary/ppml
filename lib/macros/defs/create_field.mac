macro create_field(ndim,name)
% scope.raw_var({result.to_sym => "class(ppm_t_field_), pointer :: #{result}"},:ppm_t_field_)
% scope.raw_var ({ :info => "integer :: info" })

allocate(ppm_t_field::<%= result %>,stat=info)
or_fail_alloc("Allocating the <%= result %> field")

call <%= result %>%create(<%= ndim %>, info, name=<%= name %>)
or_fail("Create field failed!")
end macro

macro create_property(pset,ndim,name,prec=mk,zero=false,type=nil)
% scope.use :ppm_module_core
% if prec == "ppm_kind_single"
%   scope.raw_var({result.to_sym => "class(ppm_t_part_prop_s_), pointer :: #{result}"},:ppm_t_part_prop_s)
% else
%   scope.raw_var({result.to_sym => "class(ppm_t_part_prop_d_), pointer :: #{result}"},:ppm_t_part_prop_d)
% end
% scope.raw_var ({ :info => "integer :: info" })

call <%= pset %>%create_prop(info <%= ", #{type} " if !type.nil?%>,name='<%= name %>',lda=<%= ndim %>,part_prop=<%= result %>,zero=.<%= zero %>.)
or_fail("Create property failed!")
end macro
