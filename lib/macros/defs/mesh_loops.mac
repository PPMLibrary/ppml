foreach macro equi_mesh(m)
modifier indices(i=i,j=j,k=nil)
modifier sca_fields(*sca_fields)
modifier vec_fields(*vec_fields)
modifier stencil_width(st_i=nil,st_j=nil,st_k=nil)
modifier prec(precision=mk)
% fields = []
% if k.nil?
%   dim = '2d'
% else
%   dim = '3d'
% end
%
% sca_fields.each do |f|
%   if f.is_a? Array
%     fields << ["#{f[0]}_#{dim}",f[1],:sca]
%   else
%     fields << ["#{f}_wp_#{dim}",f,:sca]
%   end
% end unless sca_fields.nil?
% vec_fields.each do |f|
%   if f.is_a? Array
%     fields << [f[0],f[1],:vec]
%   else
%     fields << ["#{f}_wp",f,:vec]
%   end
% end unless vec_fields.nil?
% if precision.to_s == "prec_s"
%   precision = "ppm_kind_single"
% else
%   precision = "ppm_kind_double"
% end
% scope.var :i, "INTEGER" 
% scope.var :j, "INTEGER"
% scope.var :k, "INTEGER" unless k.nil?
% scope.var(:sbpitr, "CLASS(ppm_t_subpatch_),POINTER")
sbpitr => <%= m %>%subpatch%begin()
% unless bodies.west.nil? && bodies.east.nil? && bodies.south.nil? && bodies.north.nil? && bodies.bottom.nil? && bodies.top.nil? && bodies.interior.nil? && bodies.valid_nodes.nil?
%   scope.var(:stnclint, "INTEGER,DIMENSION(2*ppm_dim)")
% end
%
do while (associated(sbpitr))
% fields.each do |f|
% if k.nil?
%   if f[2] == :sca
%     scope.var "#{f[0]}".to_sym,  "real(#{precision}), dimension(:,:), pointer", "=> null()"
%     ft = CG::Transform.new "#{f[1]}_#{iter}", "#{f[0]}(i,j)"
%   else
%     scope.var "#{f[0]}".to_sym,  "real(#{precision}), dimension(:,:,:), pointer", "=> null()"
%     ft = CG::Transform.new "#{f[1]}_#{iter}", "#{f[0]}($1,i,j)"
%   end
    CALL sbpitr%get_field(<%= f[0] %>, <%= f[1] %>, info)
    $or_fail("\"#{f[0]}\"","ppm_err_sub_failed")
%
% else
%   if f[2] == :sca
%     scope.var "#{f[0]}".to_sym,  "real(#{precision}), dimension(:,:,:), pointer", "=> null()"
%     ft = CG::Transform.new "#{f[1]}_#{iter}", "#{f[0]}(i,j,k)"
%   else
%     scope.var "#{f[0]}".to_sym,  "real(#{precision}), dimension(:,:,:,:), pointer", "=> null()"
%     ft = CG::Transform.new "#{f[1]}_#{iter}", "#{f[0]}($1,i,j,k)"
%   end
    CALL sbpitr%get_field(<%= f[0] %>, <%= f[1] %>, info)
    $or_fail("\"#{f[0]}\"","ppm_err_sub_failed")
% end
%
%   ft.transform! bodies.all, bodies.real, bodies.interior, bodies.west, bodies.east
%   ft.transform! bodies.south, bodies.north, bodies.bottom, bodies.top, bodies.valid_nodes
% end
%
% unless bodies.west.nil? && bodies.east.nil? && bodies.south.nil? && bodies.north.nil? && bodies.bottom.nil? && bodies.top.nil?
!boundaries of the array on which the full symmetric stencil can be applied
    stnclint(1) = MAX(1,               1-sbpitr%ghostsize(1) + <%= st_i %>)
    stnclint(2) = MIN(sbpitr%nnodes(1),sbpitr%nnodes(1)+sbpitr%ghostsize(2) - <%= st_i %>)
    stnclint(3) = MAX(1,               1-sbpitr%ghostsize(3) + <%= st_j %>)
    stnclint(4) = MIN(sbpitr%nnodes(2),sbpitr%nnodes(2)+sbpitr%ghostsize(5) - <%= st_j %>)
%  unless st_k.nil?
    stnclint(5) = MAX(1,               1-sbpitr%ghostsize(5) + <%= st_k %>)
    stnclint(6) = MIN(sbpitr%nnodes(3),sbpitr%nnodes(3)+sbpitr%ghostsize(6) - <%= st_k %>)
%  end
% end
%
% unless bodies.all.nil?
%   unless k.nil?
    do <%= k %> = sbpitr%lo_a(3), sbpitr%hi_a(3)
%   end
    do <%= j %> = sbpitr%lo_a(2), sbpitr%hi_a(2)
    do <%= i %> = sbpitr%lo_a(1), sbpitr%hi_a(1)
<%= bodies.all.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.valid_nodes.nil?
%   if k.nil?
% scope.var :incl_ghosts, "INTEGER,DIMENSION(4)"
%   else
% scope.var :incl_ghosts, "INTEGER,DIMENSION(6)"
%   end
    WHERE (sbpitr%bc.LT.0 .OR. &
                sbpitr%bc.NE.ppm_param_bcdef_freespace)
        incl_ghosts = 1
    ELSEWHERE
        incl_ghosts = 0
    END WHERE
%   unless k.nil?
    do <%= k %> = 1 -            incl_ghosts(5)*sbpitr%ghostsize(5), &
              sbpitr%nnodes(3) + incl_ghosts(6)*sbpitr%ghostsize(6)
%   end
    do <%= j %> = 1 -            incl_ghosts(3)*sbpitr%ghostsize(3), &
              sbpitr%nnodes(2) + incl_ghosts(4)*sbpitr%ghostsize(4)
    do <%= i %> = 1 -            incl_ghosts(1)*sbpitr%ghostsize(1), &
              sbpitr%nnodes(1) + incl_ghosts(2)*sbpitr%ghostsize(2)
<%= bodies.valid_nodes.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.real.nil?
%   unless k.nil?
    do <%= k %> = 1, sbpitr%nnodes(3)
%   end
    do <%= j %> = 1, sbpitr%nnodes(2)
    do <%= i %> = 1, sbpitr%nnodes(1)
<%= bodies.real.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.interior.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(3),stnclint(4)
    do <%= i %> = stnclint(1),stnclint(2)
<%= bodies.interior.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.west.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(3),stnclint(4)
    do <%= i %> = stnclint(1)-<%= st_i %>,stnclint(1)
<%= bodies.west.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.east.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(3),stnclint(4)
    do <%= i %> = stnclint(2),stnclint(2)+<%= st_i %>
<%= bodies.east.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
%
% unless bodies.south.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(3)-<%= st_j %>,stnclint(3)
    do <%= i %> = stnclint(1),stnclint(2)
<%= bodies.south.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
%
% unless bodies.north.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(4),stnclint(4)+<%= st_j %>
    do <%= i %> = stnclint(1),stnclint(2)
<%= bodies.north.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
    sbpitr => <%= m %>%subpatch%next()
end do
end macro
