macro create_particles(topology=nil, npart=nil, prec=mk, ghost_size=nil, min=nil, max=nil, distrib=ppm_param_part_init_cartesian)
% if prec == "mk"
%   prec = conf.ppm.prec
% end
% if prec == "ppm_kind_single"
%   scope.raw_var({result.to_sym => "TYPE(ppm_t_particles_s), POINTER :: #{result} => NULL()"},
%                 :ppm_t_particles_s)
% else
%   scope.raw_var({result.to_sym => "TYPE(ppm_t_particles_d), POINTER :: #{result} => NULL()"},
%                 :ppm_t_particles_d)
% end
% if topology.nil? and (min.nil? or max.nil?)
%   raise "Error, either a topology or the extents must be given"
% end
% np = npart
% if npart.nil?
%   scope.arg name: :Npart, type: "INTEGER", default: "10000", ctrl_name: "'Npart'", long_flag: "'npart'", help: "'Global number of particles'"
%  np = 'Npart'
% end
% scope.raw_var({info: "INTEGER :: info"})
ALLOCATE(<%= result %>,STAT=info)
or_fail_alloc("Could not allocate <%= result %>")

CALL <%= result %>%initialize(<%= "#{np}" %>, info<%= ", topoid=#{topology}" unless topology.nil? %>, distrib=<%= distrib %><%= ", cutoff=#{ghost_size}" unless ghost_size.nil?%><%= ", minphys=(/#{min.join(',')}/)" unless min.nil?%><%= ", maxphys=(/#{max.join(',')}/)" unless max.nil?%>)
end macro
