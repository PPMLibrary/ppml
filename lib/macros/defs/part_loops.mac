foreach macro particles(pset)
modifier positions(x)
modifier sca_fields(*sca_fields)
modifier vec_fields(*vec_fields)
% scope.var iter.to_sym,  "integer"
% unless x == :required
%   scope.var "#{x}_#{iter}".to_sym,  "real(mk), dimension(:,:), pointer", "=> null()"
call <%= pset %>%get_xp(<%= "#{x}_#{iter}" %>,info)
$or_fail("\"getting positions #{pset}\"")
% end
% sca_fields.each do |f|
%   scope.var "#{f[0]}_#{iter}".to_sym,  "real(mk), dimension(:), pointer", "=> null()"
call <%= pset %>%get_field(<%= f[1] %>,<%= "#{f[0]}_#{iter}" %>,info)
$or_fail("\"getting field #{f[1]} for #{pset}\"")
% end unless sca_fields.nil?
% vec_fields.each do |f|
%   scope.var "#{f[0]}_#{iter}".to_sym, "real(mk), dimension(:,:), pointer", "=> null()"
call <%= pset %>%get_field(<%= f[1] %>,<%= "#{f[0]}_#{iter}" %>,info)
$or_fail("\"getting field #{f[1]} for #{pset}\"")
% end unless vec_fields.nil?
do <%= iter %>=1,<%= pset %>%Npart
% sca_fields.each do |f|
%   body.transform! "#{f[0]}_#{iter}", "#{f[0]}_#{iter}(#{iter})"
% end unless sca_fields.nil?
% vec_fields.each do |f|
%   body.transform! "#{f[0]}_#{iter}", "#{f[0]}_#{iter}($1,#{iter})"
% end unless vec_fields.nil?
% body.transform! "#{x}_#{iter}", "#{x}_#{iter}($1,#{iter})"
<%= body.indent 2 -%>
end do
end macro
