foreach macro particles(pset)
modifier positions(x)
modifier sca_fields(*sca_fields)
modifier vec_fields(*vec_fields)
modifier prec(precision=mk)
% fields = []
% sca_fields.each do |f|
%   if f.is_a? Array
%     fields << ["#{f[0]}_wp",f[1],:sca]
%   else
%     fields << ["#{f}_wp",f,:sca]
%   end
% end unless sca_fields.nil?
% vec_fields.each do |f|
%   if f.is_a? Array
%     fields << ["#{f[0]}_wp",f[1],:vec]
%   else
%     fields << ["#{f}_wp",f,:vec]
%   end
% end unless vec_fields.nil?
% if precision.to_s == "prec_s"
%   precision = "ppm_kind_single"
% else
%   precision = "ppm_kind_double"
% end
% scope.var iter.to_sym,  "integer"
% unless x == :required
%   scope.var "#{x}_#{iter}".to_sym,  "real(#{precision}), dimension(:,:), pointer", "=> null()"
call <%= pset %>%get_xp(<%= "#{x}_#{iter}" %>,info)
or_fail("getting positions <%= "#{pset}" %>")
% end
% fields.each do |f|
%   if f[2] == :sca
%     scope.var "#{f[0]}_#{iter}".to_sym,  "real(#{precision}), dimension(:), pointer", "=> null()"
%   else
%     scope.var "#{f[0]}_#{iter}".to_sym, "real(#{precision}), dimension(:,:), pointer", "=> null()"
%   end
call <%= pset %>%get(<%= f[1] %>,<%= "#{f[0]}_#{iter}" %>,info)
or_fail("getting field <%= "#{f[1]}" %> for <%= "#{pset}" %>")
% end
do <%= iter %>=1,<%= pset %>%Npart
% fields.each do |f|
%   if f[2] == :sca
%     body.transform! "#{f[0][0...-3]}_#{iter}", "#{f[0]}_#{iter}(#{iter})"
%   else
%     body.transform! "#{f[0][0...-3]}_#{iter}", "#{f[0]}_#{iter}($1,#{iter})"
%   end
% end
% body.transform! "#{x}_#{iter}", "#{x}_#{iter}($1,#{iter})"
<%= body.indent 2 -%>
end do
end macro
