#!/usr/bin/env ruby

require 'erb'
require 'thor'
require 'thor/group'
require_relative '../lib/settings'
require_relative '../lib/cg'

class PPM < Thor

  desc 'pp FILE?', 'Preprocess a fortran FILE and perform macro substitution. If FILE not provided read from STDIN'
  method_option :outfile, :aliases => '-o', :type => :string, :desc => 'Put results in OUTFILE'
  def pp file=nil
    require_relative '../lib/macros'
    input = file ? File.new(file) : STDIN

    configatron.comment_mode = false
    o = CG::Preprocessor.instance.process(input.read)

    if options[:outfile]
      File.open(options[:outfile], 'w+') do |f|
        f.puts o
      end
    else
      puts o
    end

  end

  desc 'newproject NAME [-d | --defaults]', 'Create a new project in NAME'
  def newproject(*args)
    invoke NewProjectGroup, args
  end

  desc 'build', 'Build the simulation binary'
  def build
  end

  desc 'bench', 'Run a benchmark'
  def bench(*args)
    invoke BenchmarkGroup, args
  end

end
  
class NewProjectGroup < Thor::Group
  include Thor::Actions
  argument :name
  class_option :defaults, :type => :boolean, :aliases => "-d", :default => false
  def self.source_root
    File.dirname(__FILE__)
  end

  def create_dirs
    # The project directory
    empty_directory name
    # where user defined macros are created
    empty_directory "#{name}/macros"
    # where the generated fortran code is placed
    empty_directory "#{name}/gen"
    # where the executable is placed
    empty_directory "#{name}/bin"
    # where the run is executed
    empty_directory "#{name}/run"
  end

  def create_client_skel
    template "../lib/templates/client.tt", "#{name}/#{name}.ppm"
  end

  def create_client_config
 
    # defaults
    @ppm_base_path = '/usr/local'
    @mpi_state = "true"
    @compiler = "mpif90"
    @ppmnumerics_base_path = "/usr/local"
    @metis_base_path = "/usr/local"

    if !options[:defaults]
      @ppm_base_path = ask("Please point me to the PPM core base path:")
      @ppmnumerics_base_path = ask("Please point me to the PPM numerics base path:")
      @metis_base_path = ask("Now, if I only knew where METIS is:")
      if yes?("Are you using MPI? (Y/n)")
        @mpi_state = "true"
        say("OK, so I'll be using mpif90 as the Fortran compiler.")
      else
        @mpi_state = "false"
        @compiler = ask("What compiler command would you like to use:")
      end
    end
    
    template "../lib/templates/settings.tt", "#{name}/#{configuration_file_name}"

  end
end

class BenchmarkGroup < Thor::Group
  include Thor::Actions
  class_option :defaults, :type => :boolean, :aliases => "-d", :default => false
  def self.source_root
    File.dirname(__FILE__)
  end

  def get_configuration
    read_configuration
    @client = conf.project_name
  end

  def create_dirs
    # The benchmark directory
    empty_directory "bench"

  end

  def copy_files
    FileUtils.copy "bin/#{@client}", "bench/"
    FileUtils.copy "Ctrl", "bench/"
    @nprocs = conf.bench.nprocs
    @nreps = conf.bench.nreps
    template "../lib/templates/benchmark_script.tt", "bench/job.sh"
  end

  def bench_it
    inside 'bench/' do
      @target = conf.bench.target
      command_template = conf.bench.to_hash[@target.to_sym][:exec]
      erb = ERB.new command_template
      command = erb.result
      run command
    end

  end

  def analyze
    benchmark = CG::Benchmark.newb
    @nprocs.each do |np|
      @nreps.each do |nr|
        File.open "proc_%06d/run_%03d" % [np,nr] do |csv_data|
          benchmark.append csv_data,np
        end
      end
    end

  end
end

PPM.start
